{"pageProps":{"source":{"compiledSource":"/*@jsxRuntime automatic @jsxImportSource react*/\n/*<FillImage alt=\"UI of the visualization editor\" src=\"/images/hypermapper-ui.png\" />*/\nconst {Fragment: _Fragment, jsx: _jsx, jsxs: _jsxs} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction _createMdxContent(props) {\n  const _components = Object.assign({\n    p: \"p\",\n    img: \"img\",\n    h3: \"h3\",\n    ul: \"ul\",\n    li: \"li\",\n    a: \"a\"\n  }, _provideComponents(), props.components);\n  return _jsxs(_Fragment, {\n    children: [\"\\n\", _jsx(_components.p, {\n      children: _jsx(_components.img, {\n        src: \"/images/hypermapper-ui.png\",\n        alt: \"UI of the visualization editor\",\n        width: \"3360\",\n        height: \"1906\"\n      })\n    }), \"\\n\", _jsx(_components.h3, {\n      children: \"Features\"\n    }), \"\\n\", _jsxs(_components.ul, {\n      children: [\"\\n\", _jsxs(_components.li, {\n        children: [\"Per-site configuration files written in js, coffeescript, or \", _jsx(_components.a, {\n          href: \"https://github.com/johncomposed/mapping-community-mappers/blob/master/achr.config.coffee.md\",\n          children: \"literate coffeescript\"\n        })]\n      }), \"\\n\", _jsx(_components.li, {\n        children: \"Ability to freeze and unfreeze in-progress crawls\"\n      }), \"\\n\", _jsx(_components.li, {\n        children: \"A graph database to cache pre-scraped pages\"\n      }), \"\\n\", _jsx(_components.li, {\n        children: \"A live-updating visualization editor for postprocessing and other site-specific tweaks using custom javascript\"\n      }), \"\\n\", _jsx(_components.li, {\n        children: \"Force-directed graph visualizations powered by cytoscape.js\"\n      }), \"\\n\", _jsx(_components.li, {\n        children: \"Custom blacklists, whitelists, siteDepth, and more\"\n      }), \"\\n\"]\n    }), \"\\n\", _jsx(_components.h3, {\n      children: \"History\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"I became interested in hyperlink network analysis in 2019 while studying under \", _jsx(_components.a, {\n        href: \"https://cssh.northeastern.edu/faculty/gavin-shatkin/\",\n        children: \"Gavin Shatkin\"\n      }), \" at the School of Public Policy and Urban Affairs at Northeastern University. What started as an attempt to understand the digital networks of organizations that study physical social networks (like the Asian Coalition on Housing Rights) quickly spiraled into a year-long side project evaluating the shortcomings of existing hyperlink network analysis software and eventually creating my own.\"]\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"In brief, my findings were that variations in the layout of individual websites had a dramatic effect on the resulting generated network graph. These variations, despite affecting the resulting network graph, were generally completely hidden by all the existing network analysis tools at the time. As an example, the analysis tools would pick up some website footers full of links, but other sitesâ€™ footers would be filtered out. My solution to this was a custom crawler with extensive configuration options and a post-crawl editor for site-specific adjustments. This allowed me to have a higher level of confidence that I was in fact \\\"mapping\\\" these broad network graphs and not just uncovering the differences in site layout and structure.\"\n    })]\n  });\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, props)\n  })) : _createMdxContent(props);\n}\nreturn {\n  default: MDXContent\n};\n","frontmatter":{},"scope":{"title":"Hypermapper"}},"sources":{"description":{"compiledSource":"/*@jsxRuntime automatic @jsxImportSource react*/\nconst {jsx: _jsx} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction _createMdxContent(props) {\n  const _components = Object.assign({\n    p: \"p\"\n  }, _provideComponents(), props.components);\n  return _jsx(_components.p, {\n    children: \"Novel hyperlink network analysis tool created for my research on the digital footprints of community mappers.\"\n  });\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, props)\n  })) : _createMdxContent(props);\n}\nreturn {\n  default: MDXContent\n};\n","frontmatter":{},"scope":{"title":"Hypermapper"}}},"data":{"title":"Hypermapper"},"slug":"projects/hypermapper"},"__N_SSG":true}