{"pageProps":{"source":{"compiledSource":"/*@jsxRuntime automatic @jsxImportSource react*/\nconst {Fragment: _Fragment, jsx: _jsx, jsxs: _jsxs} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction _createMdxContent(props) {\n  const _components = Object.assign({\n    p: \"p\",\n    img: \"img\",\n    h3: \"h3\",\n    a: \"a\"\n  }, _provideComponents(), props.components);\n  return _jsxs(_Fragment, {\n    children: [_jsx(_components.p, {\n      children: _jsx(_components.img, {\n        src: \"/images/topsail.png\",\n        alt: \"Screenshot of topsail 2018\",\n        width: \"1687\",\n        height: \"1170\"\n      })\n    }), \"\\n\", _jsx(_components.h3, {\n      children: \"History\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"Topsail started off as a simple single-html-file application that provided a thin wrapper over \", _jsx(_components.a, {\n        href: \"http://schemaform.io/\",\n        children: \"angular schema-form\"\n      }), \" and \", _jsx(_components.a, {\n        href: \"https://mathjs.org/\",\n        children: \"math.js\"\n      }), \". I made it over a weekend to help a good friend blow people's minds in his new-grad corporate finance job by letting him turn his excel sheets into json-defined \\\"mini web applications\\\" without actually knowing how to code. This small weekend project eventually kickstarted my consulting career when a 7-digit in-house application inspired by one of these \\\"mini web applications\\\" blew past its budget one too many times and higher-ups looked to track down the original creator of these configurable mini web apps.\"]\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"Over the years Topsail was improved as an in-house product of my consultancy. By its last version around 2018, it was a fully-featured admin application that supported excel formulas through \", _jsx(_components.a, {\n        href: \"https://github.com/sutoiku/formula.js\",\n        children: \"Formula.js\"\n      }), \", had a custom schema editor environment, supported some ridiculously complex logic, was entirely configurable from a sharepoint database (with Boolean matrix representation of rollup sums), provided visualizations via \", _jsx(_components.a, {\n        href: \"https://vega.github.io/vega/\",\n        children: \"vega.js\"\n      }), \", and could even fill in documents with a fork of pdf.js.\"]\n    })]\n  });\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, props)\n  })) : _createMdxContent(props);\n}\nreturn {\n  default: MDXContent\n};\n","frontmatter":{},"scope":{"title":"Topsail JSON Schema Engine"}},"sources":{"description":{"compiledSource":"/*@jsxRuntime automatic @jsxImportSource react*/\nconst {jsx: _jsx} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction _createMdxContent(props) {\n  const _components = Object.assign({\n    p: \"p\"\n  }, _provideComponents(), props.components);\n  return _jsx(_components.p, {\n    children: \"Generate complex business applications with JSON Schemas\"\n  });\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, props)\n  })) : _createMdxContent(props);\n}\nreturn {\n  default: MDXContent\n};\n","frontmatter":{},"scope":{"title":"Topsail JSON Schema Engine"}}},"data":{"title":"Topsail JSON Schema Engine"},"slug":"projects/topsail-json-schema"},"__N_SSG":true}